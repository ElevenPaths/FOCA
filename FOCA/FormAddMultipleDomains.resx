<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAKCMAAAEAIAAgFwAAFgAAACgAAAAoAAAARgAAAAEAIAAAAAAA4BUAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAEAAAABwAAAAoAAAAOFABcGTAAmCUxAKgvOAW5NzwE
        vzw8BL88PAW5NzIArC4qAJUkFwBRFgAAAA0AAAAJAAAABQAAAAMAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAABUAVSQkBmmBORCX+EAWov9CFa//Th7E/1Id1P9WHeP/Vx3l/1Qd2/9RH8z/Rxi8/0ca
        sv9BF6j/MAeNsR0EXD0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEYD
        4ElMC+PgVRft/10f9f9eIPb/XyH3/18h9/9fIff/XR/1/1ka8P9PEOb2SAbheDMA5goAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwDeF0YF3XFJCOC9TQzj4k4O
        5uhODubnTQ3k20kK4LVHBN13QADfIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADMAzAVAAOoMRgDRCwAA/wEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////AAAA//////8AAAD//////wAAAP//////AAAA/8AAA/8A
        AAD+AAAAfwAAAP4AAAB/AAAA/4AAA/8AAAD/gAAB/gAAAP+AAAH/AAAA/4AAAf8AAAD+AAAB/wAAAP4A
        AAF/AAAA/gAAAH8AAAD+AAAAPwAAAP4AAAA/AAAA/gAAAD8AAAD+AAAAPwAAAP4AAAB/AAAA/gAAAH8A
        AAD/AAAAfwAAAP+AAAD/AAAA/8AAA/8AAAD/4AAH/wAAAP/gAAf/AAAA//AAD/8AAAD/8AAP/wAAAP/8
        AB//AAAA//4Af/8AAAD//8P//wAAAP//////AAAA//////8AAAD//////wAAAP//////AAAA//////8A
        AAA=
</value>
  </data>
</root>